import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../models/workout/analytics_models.dart';
import '../../services/nutrition/locale_helper.dart';

/// Training frequency heatmap
///
/// GitHub-style contribution calendar showing:
/// - Daily training activity over weeks/months
/// - Color intensity based on volume/sessions
/// - Touch interaction for daily details
/// - Weekly totals
class TrainingHeatmap extends StatefulWidget {
  final List<FrequencyDataPoint> dataPoints;
  final DateTime startDate;
  final DateTime endDate;
  final HeatmapMetric metric;

  const TrainingHeatmap({
    Key? key,
    required this.dataPoints,
    required this.startDate,
    required this.endDate,
    this.metric = HeatmapMetric.sessions,
  }) : super(key: key);

  @override
  State<TrainingHeatmap> createState() => _TrainingHeatmapState();
}

enum HeatmapMetric {
  sessions, // Number of sessions
  volume, // Total volume
}

class _TrainingHeatmapState extends State<TrainingHeatmap> {
  DateTime? _selectedDate;

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Header
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  LocaleHelper.t(context, 'training_frequency'),
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
                _buildLegend(),
              ],
            ),
            const SizedBox(height: 16),

            // Heatmap
            _buildHeatmap(),

            // Selected day details
            if (_selectedDate != null) ...[
              const SizedBox(height: 16),
              const Divider(),
              const SizedBox(height: 12),
              _buildSelectedDayDetails(),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildHeatmap() {
    // Calculate weeks to display
    final weeks = _generateWeeks();

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Day labels
          Row(
            children: [
              const SizedBox(width: 30), // Space for week labels
              ...['M', '', 'W', '', 'F', '', 'S'].map((day) => Container(
                    width: 16,
                    height: 20,
                    alignment: Alignment.center,
                    child: Text(
                      day,
                      style: Theme.of(context).textTheme.bodySmall?.copyWith(
                            fontSize: 10,
                          ),
                    ),
                  )),
            ],
          ),
          const SizedBox(height: 4),

          // Weeks grid
          Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: weeks.asMap().entries.map((entry) {
              final weekIndex = entry.key;
              final week = entry.value;

              return Row(
                children: [
                  // Week label (show every 4 weeks)
                  if (weekIndex % 4 == 0)
                    SizedBox(
                      width: 30,
                      height: 16 * 7.0 + 6 * 4.0, // cell height * 7 + spacing
                      child: Align(
                        alignment: Alignment.topLeft,
                        child: Text(
                          DateFormat('MMM').format(week.first),
                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                fontSize: 10,
                              ),
                        ),
                      ),
                    )
                  else
                    const SizedBox(width: 30),

                  // Days column
                  Column(
                    children: week.map((date) {
                      final dataPoint = _getDataPointForDate(date);
                      final intensity = _calculateIntensity(dataPoint);

                      return GestureDetector(
                        onTap: () {
                          setState(() {
                            _selectedDate = date;
                          });
                        },
                        child: Container(
                          width: 16,
                          height: 16,
                          margin: const EdgeInsets.all(2),
                          decoration: BoxDecoration(
                            color: _getColorForIntensity(intensity),
                            borderRadius: BorderRadius.circular(3),
                            border: _selectedDate != null &&
                                    _selectedDate!.year == date.year &&
                                    _selectedDate!.month == date.month &&
                                    _selectedDate!.day == date.day
                                ? Border.all(color: Colors.black, width: 2)
                                : null,
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ],
              );
            }).toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildLegend() {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(
          LocaleHelper.t(context, 'less'),
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                fontSize: 10,
              ),
        ),
        const SizedBox(width: 4),
        ...[0, 1, 2, 3, 4].map((intensity) => Container(
              width: 12,
              height: 12,
              margin: const EdgeInsets.only(left: 2),
              decoration: BoxDecoration(
                color: _getColorForIntensity(intensity),
                borderRadius: BorderRadius.circular(2),
              ),
            )),
        const SizedBox(width: 4),
        Text(
          LocaleHelper.t(context, 'more'),
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                fontSize: 10,
              ),
        ),
      ],
    );
  }

  Widget _buildSelectedDayDetails() {
    if (_selectedDate == null) return const SizedBox();

    final dataPoint = _getDataPointForDate(_selectedDate!);
    final hasData = dataPoint != null && dataPoint.sessionsCount > 0;

    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.grey[100],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            DateFormat('EEEE, MMMM d, y').format(_selectedDate!),
            style: Theme.of(context).textTheme.titleSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
          ),
          const SizedBox(height: 8),
          if (hasData) ...[
            Row(
              children: [
                Icon(Icons.fitness_center, size: 16, color: Colors.grey[600]),
                const SizedBox(width: 8),
                Text(
                  '${dataPoint!.sessionsCount} ${LocaleHelper.t(context, dataPoint.sessionsCount == 1 ? 'session' : 'sessions')}',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
              ],
            ),
            const SizedBox(height: 4),
            Row(
              children: [
                Icon(Icons.trending_up, size: 16, color: Colors.grey[600]),
                const SizedBox(width: 8),
                Text(
                  '${(dataPoint.totalVolume / 1000).toStringAsFixed(1)}k kg ${LocaleHelper.t(context, 'volume')}',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
              ],
            ),
          ] else
            Text(
              LocaleHelper.t(context, 'no_training_this_day'),
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                    color: Colors.grey[600],
                  ),
            ),
        ],
      ),
    );
  }

  List<List<DateTime>> _generateWeeks() {
    final weeks = <List<DateTime>>[];
    var currentDate = widget.startDate;

    // Start from the Monday of the week containing startDate
    while (currentDate.weekday != DateTime.monday) {
      currentDate = currentDate.subtract(const Duration(days: 1));
    }

    while (currentDate.isBefore(widget.endDate) || currentDate.isAtSameMomentAs(widget.endDate)) {
      final week = <DateTime>[];
      for (int i = 0; i < 7; i++) {
        week.add(currentDate);
        currentDate = currentDate.add(const Duration(days: 1));
      }
      weeks.add(week);
    }

    return weeks;
  }

  FrequencyDataPoint? _getDataPointForDate(DateTime date) {
    try {
      return widget.dataPoints.firstWhere(
        (point) =>
            point.date.year == date.year &&
            point.date.month == date.month &&
            point.date.day == date.day,
      );
    } catch (e) {
      return null;
    }
  }

  int _calculateIntensity(FrequencyDataPoint? dataPoint) {
    if (dataPoint == null) return 0;

    // Calculate intensity based on metric
    if (widget.metric == HeatmapMetric.sessions) {
      // 0 sessions = 0, 1 session = 1, 2 sessions = 2, 3+ sessions = 3-4
      if (dataPoint.sessionsCount == 0) return 0;
      if (dataPoint.sessionsCount == 1) return 1;
      if (dataPoint.sessionsCount == 2) return 2;
      if (dataPoint.sessionsCount == 3) return 3;
      return 4;
    } else {
      // Volume-based: 0kg = 0, <2k = 1, <5k = 2, <10k = 3, 10k+ = 4
      final volumeInK = dataPoint.totalVolume / 1000;
      if (volumeInK == 0) return 0;
      if (volumeInK < 2) return 1;
      if (volumeInK < 5) return 2;
      if (volumeInK < 10) return 3;
      return 4;
    }
  }

  Color _getColorForIntensity(int intensity) {
    switch (intensity) {
      case 0:
        return Colors.grey[200]!;
      case 1:
        return Colors.green[200]!;
      case 2:
        return Colors.green[400]!;
      case 3:
        return Colors.green[600]!;
      case 4:
        return Colors.green[800]!;
      default:
        return Colors.grey[200]!;
    }
  }
}
